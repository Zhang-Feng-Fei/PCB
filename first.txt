1、git init 工作目录（文件夹或工作区）名；工作目录内生成一个名为.git的隐藏文件夹（Git的版本库不属于工作区的文件夹），版本库管理着工作区中文件的历次改动信息；
2、git add   文件名1 文件名2 ...：把修改从工作区添加到暂存区；
3、git commit       -m “message”：把暂存区里的改动提交到本地的版本库，提交后暂存区就变成空白了（见picture3）。
//注：Git为我们自动创建第1个分支master；
//注：Git的版本库里存了很多东西，其中最重要的就是暂存区（stage或叫index）；
//注：指向master的1个指针叫HEAD。（见picture1）
//注：修改的提交跟着分支走的；
//注：Git管理的是修改，不是文件。
4、git status：修改的文件或文件夹在工作区、暂存区的状态；（见picture2）
5、git diff：查看尚未暂存的文件修改了哪些部分；
6、git diff HEAD -- 文件名：工作区中的文件与最新版本库中记录的文件差异。
//注：HEAD指向的版本库最新版本；
7、git reset --hard commit_id（目标版本号）：将HEAD指向的位置改变为之前存在的某个版本；
//注：commit_id可以是目标版本号如1094a，可是上一个版本HEAD^，可是上上一个版本HEAD^^，可是前n个版本HEAD~n；
8、git log：按提交时间列出所有的版本提交，最近排在最上面。每次提价都有一个 SHA-1 校验和、作者的名字 和 电子邮件地址、提交时间，最后缩进一个段落显示提交说明；
9、git log --pretty=oneline：以精简模式显示列出所有的版本提交；
10、git reflog：查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）；
11、若想撤销工作区的修改（或恢复工作区删除的文件）：git checkout -- 文件名；注：回到暂存区的状态（或者其实是用版本库里的版本替换工作区的版本）；注：从来没有被添加到版本库就被删除的文件，是无法恢复的；注：只能恢复文件到最新版本，会丢失最近一次提交后修改的内容；
12、若修改已添加到暂存区，想撤销修改：首先把暂存区修改重新放回到工作区（git reset HEAD 文件名），然后在工作区将该修改撤销（git checkout -- 文件名）；注：回到最近一次git commit时的状态
13、若修改已提交到版本库，想撤销修改：可回退到上一个版本，前提是本地库还未推送到远程库；
14、删除文件提交进版本库：git add 与 git commit -m（或git rm 与 git commit -m）。

GitHub：
1、注册GitHub账号；
2、本地Git仓库和GitHub仓库之间的SSH加密传输设置；
1）创建SSH Key：Shell（Windows下打开Git Bash）下敲击指令：ssh-keygen -t rsa -C "1033256287@qq.com"，然后一路回车；
2）在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对；注：id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
3）登陆GitHub，打开“Account settings”——“SSH Keys”页面——点“Add SSH Key”——填上任意Title——Key文本框里粘贴id_rsa.pub文件的内容（见picture4）；
注：GitHub只要知道了你的SSH公钥，就可以确认只有你自己才能推送；
注：GitHub允许你添加多个SSH公钥，每台电脑一个SSH公钥；
注：GitHub上免费托管的Git仓库，任何人都可以看到但不能修改；
注：有两个办法让别人看不见GitHub上的Git仓库：一个是交点保护费，让GitHub把公开的仓库变成私有的，另一个办法是自己动手搭一个Git服务器。
3、GitHub创建Git仓库：
1）登陆GitHub——“Create a new repo”——创建1个新的仓库（见picture5）；
2）在Repository name填入本地仓库的名字，其他保持默认设置，点击“Create repository”按钮；
4、本地仓库与远程仓库关联（本地仓库下运行）
1）git remote add origin https://github.com/Zhang-Feng-Fei/PCB.git（自己github仓库地址）；注：远程库的名字就叫origin，当然也可以改成别的。
5、本地仓库的内容推送到GitHub仓库（本地仓库下运行）
1）git push -u origin master；注：把当前分支master推送到远程；注：由于远程库是空的，首次推送时加上-u，Git还会把本地的master分支和远程的master分支关联起来。
2）以后就可以用git push origin master推送了，不需要加-u了。

本机与GitHub首次连接：
1）首次使用clone或push命令连接GitHub时，会弹出1个SSH警告，这是因为SSH首次连接，需要本机确认GitHub的Key是否真的来自GitHub服务器；
2）输入yes回车，这样就把GitHub的Key添加到本机的一个信任列表里了；
3）若担心有人冒充GitHub服务器，输入yes前可对照GitHub的RSA Key是否与SSH连接给出的一致。

GitHub远程库创建及克隆：
1、创建1个GitHub远程仓库，命名为gitskills；（见picture6）
2、使用git clone命令克隆远程仓库出来1个本地库，例：git clone https://github.com/Zhang-Feng-Fei/gitskills.git（或git@github.com:Zhang-Feng-Fei/gitskills.git）；
注：Git支持多种协议
1）默认ssh协议；
2）也可是https协议，缺点：传输速度慢、每次推送都必须输入口令。

创建与切换分支、当前分支修改提交、分支合并、删除创建的分支：
1、默认都有1个master（主）分支；
2、HEAD指向的是当前分支，分支才指向提交；（见picture7）
3、创建dev分支并使HEAD指向dev分支（git checkout -b dev或git switch -c dev或git branch dev +  git checkout dev），目前dev分支与master分支指向相同的提交；（见picture8）
4、查看所有分支及当前分支：git branch；
5、在dev分支执行修改提交工作；（见picture9）
6、切换到master分支：git checkout master或git switch master；（见picture12）
注：（git switch 分支名）时——————还会提示本地库该分支比远程库该分支超前几个提交。

2分支指向1条直线上不同提交时的合并
1、dev分支合并到master分支上：git merge dev；（见picture10）
2、删除dev分支（指针）：git branch -D dev（强制删除）或git branch -d dev（有条件删除，条件是合并完成的分支）；此时只剩master分支；（见picture11）
注：分支不同的相同文件，文件内容可能不同；
注：dev分支与master分支修改都提交，才能正常合并；

2分支指向分叉提交时的合并（手动修改master分支文件内容）
1、当2个分支都进行了修改提交，2个分支指向了不同的提交；（见picture13）
2、首先查找冲突文件：git merge feature1或git status；
3、冲突文件解决办法：
1）打开冲突文件，在冲突文件内已经用<<<<<<<，=======，>>>>>>>标记出冲突的部分；
2）将master分支冲突文件的冲突内容修改成与dev分支一致，然后提交master分支；
3）dev分支与master分支就如图。（见picture14）
4、查看分支合并情况：git log --graph --pretty=oneline --abbrev-commit或git log --pretty=oneline --abbrev-commit；
注：合并就是让2个分支指向相同的递交。
注：默认“快进模式”（Fast-forward）合并，就是把master分支指向dev分支当前提交，缺点：分支删掉后分支信息会丢失；

2分支指向分叉提交时的合并（禁用“快进模式”（Fast-forward））
1、强制禁用“快进模式”（Fast-forward）模式：git merge --no-ff -m "merge with no-ff" dev；
2、--no-ff就是强制禁用Fast forward模式；
3、-m "merge with no-ff"就是生成1个新的提交；
4、这样2分支合并且产生了新的提交，而且dev分支也删掉了；（见picture15）
5、当git log（查看分支历史）时，仍然可以看到dev分支修改的一系列信息。

分支管理基本原则：
1、master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
2、都在dev分支上干活，dev分支是不稳定的，比如1.0版本需要发布时，再把dev分支合并到master上，在master分支发布1.0版本；
3、你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
4、团队合作的分支看起来就像这样。（见picture16）

Bug分支管理基本原则：
1、遇到Bug时，新建Bug临时分支，修改完Bug后合并，删除Bug分支；
2、当dev分支工作区未提交且需要修改master分支的bug，先将dev分支工作区的内容保存起来：git stash；注：就是将文件中还未提交到暂存区的内容保存到其它地方，此时文件中没有了之前编辑且还在工作区的内容；
3、修复更久之前的Bug：
1）切换到master分支——————创建并切换进Bug分支；
2）修改Bug后——————保存进工作区——————提交进暂存区————————提交进本地库；
3）切换到master分支——————Bug分支合并master分支——————删除Bug分支；
4）master分支的Bug修改完——————切换进dev分支——————接着干dev分支的活；
4、将dev分支工作区内容恢复
1）查看dev分支工作区的内容现在保存在哪：git stash list；
2）将保存的内容恢复到dev分支的工作区：git stash apply（不删除保存区内容，可用git stash drop去删除）或git stash pop（同时删除保存区内容）；
3）若进行过多次git stash，可指定删除哪个stash： git stash apply stash@{0}。

master分支Bug修改后，修改dev分支同样的Bug：
1、git cherry-pick 4c805e2（master分支针对Bug进行了修改，提交这部分修改时的commit_id）；
注：即使2个分支修改的是同一个地方，修改内容也相同，两个分支修改提交的commit_id也是不同的；
注：对修改文件保存——————修改内容才能传进工作区。

Feature分支管理基本原则：
1、程序每添加一个新功能，最好新建一个feature分支；
2、在Feature分支上开发新功能，完成后合并进master分支，最后删除Feature分支；
3、新建并切换近入Feature分支——————Feature分支开发完成新功能——————提交修改——————切换进master分支——————Feature分支合并进master分支——————删除Feature分支

多人协作：
1、查看本地仓库关联的远程仓库地址：git remote或git remote -v；（没有权限是看不到push的地址）
2、远程仓库默认名称：origin；
3、推送本地仓库分支到远程仓库分支：git push origin master；
注：推送本地仓库分支的原则
1）master分支、dev分支（开发分支，团队所有成员都需要在上面工作）都需要推送；
2）bug分支（除非老板要看看你每周到底修复了几个bug）、feature分支（你是否和你的小伙伴合作在上面开发）可不推送。
4、抓取远程仓库分支到本地仓库：git clone https://github.com/Zhang-Feng-Fei/gitskills.git；注：只能抓取maste分支；
5、本地仓库创建打开dev分支，并抓取远程仓库dev分支：git checkout -b dev origin/dev；
6、本地仓库dev分支推送到远程仓库dev分支
1）指定本地仓库dev分支与远程仓库origin/dev分支的链接：git branch --set-upstream-to=origin/dev dev；
2）把远程仓库origin/dev抓取下来：git pull；
3）本地仓库dev分支与远程仓库dev分支有冲突时，需要解决冲突后再在本地进行合并；
4）将修改提交至本地仓库并推送至远程仓库：git commit -m "fix env conflict"、git push origin dev；
注：
1）无法向远程库dev分支推送本地仓库dev分支的原因：远程仓库dev分支已经被其他人修改，必须先解决本地仓库dev分支与远程仓库dev分支的冲突；
2）git add或合并可以把工作区修改放进暂存区。

把分叉的提交记录整理成直线：
1、本地提交与抓取到远程提交分成了2个支路；
2、git rebase；将抓取到远程提交放在本地提交与自己的远程提交之间，并合并成一条分支；（见picture17）
注：
1）上述命令把本地仓库提交“挪动”了位置，放到了抓取的远程提交之后；
2）不管要不要git rebase，最终提交的修改是一致的；
3）本地commit_id变化了，commit_id不再基于抓取到旧远程提交，而是基于抓取到的新远程提交；
3、提交记录整理成直线后缺点：本地的分叉提交记录被修改了；
4、分叉的提交需要三方对比：旧抓取或推送的远程提交、本地提交、最新抓取的远程提交。
注：本地仓库名、远程仓库名、分支名、分支的最新提交commit、本地仓库分支可比远程仓库分支早提交。

标签：
1、标签（tag）其实是指向某个固定commit的指针（类似分支，但是分支可以移动）；
2、创建和删除标签都是瞬间完成的；
3、标签作用快速找到之前版本。




创建标签：切换到需要打标签的分支上——打一个新标签（git tag v1.0）
查看所有标签：git tag
历史提交的commit id打标签：git tag v0.9 f52c633（需要打标签的commit id）
查看标签信息：git show v0.9（标签名）
创建带有说明的标签：git tag -a v0.1 -m "version 0.1 released" 1094adb（-a指定标签名，-m指定说明文字）
注：默认标签是打在最新提交的commit上的
注：标签不是按时间顺序列出，而是按字母排序的
注：如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签

操作标签
删除标签：git tag -d v0.1
标签推送到远程：git push origin v1.0
一次性推送全部尚未推送到远程的本地标签：git push origin --tags
删除远程标签：先删除本地标签git tag -d v0.9，然后远程删除标签git push origin :refs/tags/v0.9
注：创建的标签都只存储在本地，不会自动推送到远程

使用GitHub
github上克隆别人开源的项目（仓库）
1、进入别人的github库，登录自己的github账号，点“Fork”就在自己的github账号下克隆该开源的项目（仓库）（见picture18）
2、然后要从自己的账号下clone仓库（才能推送修改）：git clone https://github.com/Zhang-Feng-Fei/bootstrap.git
注：Bootstrap的官方仓库twbs/bootstrap、你在GitHub上克隆的仓库my/bootstrap，以及你自己克隆到本地电脑的仓库，他们的关系（见picture19）
注：修改了bootstrap后，可自己的bootstrap仓库推送。如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。（见picture20）

使用Gitee
1、使用国内的Git托管服务——Gitee（gitee.com），解决github慢的问题
2、Gitee注册登录账号，上传自己的SSH公钥（见picture21）进行关联git remote add origin https://gitee.com/Zhang-Feng-Fei/PCB.git或git remote add origin git@gitee.com:Zhang-Feng-Fei/PCB.git
如果报错：因本地库已经关联了origin的远程库（该远程库指向GitHub），可以删除已有的GitHub远程库：git remote rm origin，再关联Gitee的远程库
3、本地库同时关联Gitee、Github远程库：git给远程库起的默认名称是origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库
先删除已关联的名为origin的远程库：git remote rm origin
再关联GitHub的远程库：git remote add github git@github.com:Zhang-Feng-Fei/PCB.git  远程库的名称叫github
再关联Gitee的远程库：git remote add gitee git@gitee.com:Zhang-Feng-Fei/PCB.git       远程库的名称叫gitee
4、要推送到Github与Gitee分别指令：git push github master、git push gitee master

注：一个本地库多个远程库，见picture23

注：Gitee也同样提供了Pull request功能，可以让其他小伙伴参与到开源项目中来。你可以通过Fork我的仓库：https://gitee.com/liaoxuefeng/learngit，创建一个your-gitee-id.txt的文本文件， 写点自己学习Git的心得，然后推送一个pull request给我，这个仓库会在Gitee和GitHub做双向同步。

自定义git
让Git显示颜色：git config --global color.ui true

忽略特殊文件：在Git工作目录中，但又想提交，git status一直有提示怎么办？
在Git工作区的根目录下创建一个特殊的.gitignore文件（文件内填入要隐藏的文件或者文件类型的所有文件或目录），然后把要忽略的文件名填进去，Git就会自动忽略这些文件
注：GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore
忽略文件的原则是：
1、忽略操作系统自动生成的文件，比如缩略图等；
2、忽略编译生成的中间文件、可执行文件等；
3、忽略你自己的带有敏感信息的配置文件。
.gitignore也需要提交到Git的版本库中
注：在Windows文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore（不需要带文件名）。
强制添加被git忽略的文件：git add -f App.class（文件名）
查看.gitignore忽略的某个文件在.gitignore的哪行：git check-ignore -v App.class（文件名）
给指令配置别名：git config --global（全局参数，也就是这些命令在这台电脑（用户）的所有Git仓库下都有用，不加只对当前仓库起作用） alias.st（别名） status（当前名）
显示最后一次提交的信息：git log -1
注：还可以这样配置别名：git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

每个仓库配置文件放在.git/config文件中
删除别名：别名就在[alias]后面，要删除别名，直接把配置文件对应的行删掉即可
每个电脑（用户）的git配置文件放在用户主目录下的一个隐藏文件.gitconfig

搭建Git服务器作为私有仓库使用（详见wps文档，后期整理）

git gui软件SourceTree学习

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCbhQqdEZSgRwJ/k9q8j5mjB9tHT765M9U1fcS47V/wpDVyyfe8TIiioBcKDD+c2xWdn5Quh7tET7IJdzHrqYcEAwBRs2SzqhCoATTfkdqNOPXkYNp1YYa1hNj7wtKjtKlgcjrmaBc9gr6COCWK/vYinZ6jW/RhWB0/aE0sos3rdkuOFzd9pfJ5Yx7bKSm2hC5/YnC4fGzJBuLdXeMYlbF3NsPdtdf9/4YyjfJOqQCxBAO5o4rLW4WYQwwbf27zzI/59HpT/KevDMLnK70AxOAwTSx0tNpyHx0NPHUTxFXuTyptza26rMMqjpu9GcQwD/tQACi/eOJATnDYoS3Z4jFdeahgoz74DUwxZwqAsNQazNtmIgUx7lDtFGiWLUBHEUCUC0uQGzHzkADcjsWLalXicOdA4C6ah/9N27KrGsQyIfRwLXazHYcD8LqhPVFpYEjWbPyMPLybkxxl7GHl1hH947YpO62ZabUkhfZkbxPICO23SMabY5cL2C1V4lbb5Uk= 1033256287@qq.com

详见网址：https://www.liaoxuefeng.com/wiki/896043488029600/900004111093344